openapi: 3.0.0
info:
  title: webstoreapi
  version: '1.0'
  contact:
    name: Tobi Tögel
    url: www.tögel.com
    email: tobias.toegel@gmx.de
  description: API for webstore application as part of the mobile applications course.
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
  /register:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                username:
                  type: string
                password:
                  type: string
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
                - username
                - password
            examples:
              Create User Bob Fellow:
                value:
                  username: fellowbob
                  password: bobfellow
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    parameters: []
  /login:
    post:
      summary: ''
      operationId: post-login
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: Post the user login information to server to check if user is authorized to login.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
    get:
      summary: ''
      operationId: get-login
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      description: Post the user login information to server to check if user is authorized to login.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
  /items:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/item'
            application/xml:
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
      operationId: get-store-item
      description: Get information of items that are being sold on the webstore
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples: {}
      parameters:
        - schema:
            type: string
          in: query
          name: category
          description: Search and list according to category given by user
        - schema:
            type: string
          in: query
          name: location
          description: Search and list according to location given by user
        - schema:
            type: string
          in: query
          name: date of posting
          description: Search and list according to Date of posting given by user
    post:
      summary: ''
      operationId: post-store-item
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request (missing information?)
          headers: {}
        '401':
          description: Unauthorized
      description: Create new item to sell in the webstore.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/item'
          application/xml:
            schema:
              $ref: '#/components/schemas/item'
    parameters: []
    put:
      summary: ''
      operationId: put-items
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/item'
  '/items/{itemId}':
    parameters:
      - schema:
          type: string
        name: itemId
        in: path
        required: true
        description: Id of an existing item.
    delete:
      summary: ''
      operationId: delete-items-itemId
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: Delete item from Webstore
    put:
      summary: ''
      operationId: put-items-itemId
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/item'
      description: Edit existing item in Webstore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/item'
    get:
      summary: ''
      operationId: get-items-itemId
      responses:
        '200':
          description: OK
      parameters: []
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    item:
      title: item
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        category:
          type: string
        images:
          type: string
        price:
          type: number
        date:
          type: string
        delivery type:
          type: string
        seller username:
          type: string
        seller contact:
          type: string
        location:
          type: string
      required:
        - id
        - title
        - category
        - images
        - price
        - date
        - delivery type
        - seller username
        - seller contact
        - location
      description: ''
  securitySchemes: {}
